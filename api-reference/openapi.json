{
    "openapi": "3.0.3",
    "info": {
        "title": "urlDNA API",
        "version": "2.0.0",
        "description": "API documentation for urlDNA"
    },
    "servers": [
        {
            "url": "https://api.urldna.io",
            "description": "Base endpoint"
        }
    ],
    "components": {
        "securitySchemes": {
            "ApiKeyAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "Authorization"
            }
        },
        "schemas": {
            "Viewport": {
                "type": "object",
                "description": "Viewport settings for rendering webpages, including device type and dimensions.",
                "properties": {
                    "device": {
                        "type": "string",
                        "enum": [
                            "DESKTOP",
                            "MOBILE"
                        ],
                        "description": "Type of device used for the viewport."
                    },
                    "width": {
                        "type": "number",
                        "description": "Width of the viewport in pixels."
                    },
                    "height": {
                        "type": "number",
                        "description": "Height of the viewport in pixels."
                    }
                }
            },
            "UserAgent": {
                "type": "object",
                "description": "Details about user agents for simulating browser requests.",
                "properties": {
                    "user_agent": {
                        "type": "string",
                        "description": "User agent string representing the browser or device."
                    },
                    "device": {
                        "type": "string",
                        "enum": [
                            "DESKTOP",
                            "MOBILE"
                        ],
                        "description": "Type of device associated with the user agent."
                    },
                    "browser": {
                        "type": "string",
                        "description": "Name of the browser."
                    },
                    "share": {
                        "type": "number",
                        "description": "Share percentage of this user agent among users."
                    }
                }
            },
            "Scan": {
                "type": "object",
                "description": "Contains detailed information about the scan, including URL submission details, scan status, and various scan-related metadata.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique, autogenerated identifier for the scan."
                    },
                    "submitted_url": {
                        "type": "string",
                        "description": "The URL provided by the user to be scanned."
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of the submitted URL."
                    },
                    "target_url": {
                        "type": "string",
                        "description": "The final URL after any redirection (if applicable)."
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol of the URL, such as HTTP or HTTPS."
                    },
                    "device": {
                        "type": "string",
                        "enum": [
                            "DESKTOP",
                            "MOBILE"
                        ],
                        "description": "The type of device selected for the scan, either 'DESKTOP' or 'MOBILE'."
                    },
                    "user_agent": {
                        "type": "string",
                        "description": "The user agent string associated with the device for simulating the browser environment."
                    },
                    "nsfw": {
                        "type": "boolean",
                        "description": "Indicates whether the content of the page contains Not Safe For Work (NSFW) material, such as nudity or adult content."
                    },
                    "scanned_from": {
                        "type": "string",
                        "enum": [
                            "DEFAULT",
                            "AU",
                            "BE",
                            "CA",
                            "CH",
                            "DE",
                            "ES",
                            "FR",
                            "GB",
                            "GR",
                            "HU",
                            "ID",
                            "IT",
                            "JP",
                            "MX",
                            "NL",
                            "PT",
                            "ZA",
                            "TR",
                            "US"
                        ],
                        "description": "The country from which the scan was initiated. Available only for PREMIUM users."
                    },
                    "origin": {
                        "type": "string",
                        "enum": [
                            "API",
                            "USER"
                        ],
                        "description": "Indicates whether the scan was submitted via the API or by a user."
                    },
                    "width": {
                        "type": "number",
                        "description": "The width of the viewport used during the scan in pixels."
                    },
                    "height": {
                        "type": "number",
                        "description": "The height of the viewport used during the scan in pixels."
                    },
                    "private_scan": {
                        "type": "boolean",
                        "description": "If true, the scan results are only accessible by the user who submitted the scan."
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "RUNNING",
                            "DONE",
                            "ERROR"
                        ],
                        "description": "The current status of the scan. 'PENDING' and 'RUNNING' are intermediate states, while 'DONE' and 'ERROR' are final states."
                    },
                    "submitted_date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the scan was submitted."
                    },
                    "submitter_tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of any tags associated with the scan, submitted by the user."
                    }
                }
            },
            "Certificate": {
                "type": "object",
                "description": "Contains details about the SSL/TLS certificate used by the scanned URL.",
                "properties": {
                    "authority_info_access": {
                        "type": "string",
                        "description": "Information about how to access the issuing Certificate Authority (CA), such as OCSP and CA issuer URLs."
                    },
                    "authority_key_identifier": {
                        "type": "string",
                        "description": "A unique identifier for the issuing CAâ€™s public key, ensuring proper certificate chaining."
                    },
                    "basic_constraints": {
                        "type": "string",
                        "description": "Indicates whether the certificate belongs to a CA and the maximum path length for certificate chaining."
                    },
                    "certificate_policies": {
                        "type": "string",
                        "description": "Defines policies related to certificate usage, often including URLs to policy documents."
                    },
                    "ct_precert_scts": {
                        "type": "string",
                        "description": "Signed Certificate Timestamps (SCTs) from Certificate Transparency logs, used for verifying legitimate issuance."
                    },
                    "extended_key_usage": {
                        "type": "string",
                        "description": "Specifies the intended usage of the certificate, such as server authentication or code signing."
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The entity that issued the certificate, usually a trusted Certificate Authority (CA)."
                    },
                    "key_usage": {
                        "type": "string",
                        "description": "Defines the cryptographic purposes of the certificate, such as digital signature, key encipherment, or key agreement."
                    },
                    "not_after": {
                        "type": "string",
                        "description": "The expiration date of the certificate, after which it is no longer valid."
                    },
                    "not_before": {
                        "type": "string",
                        "description": "The start date from which the certificate is considered valid."
                    },
                    "serial_number": {
                        "type": "string",
                        "description": "A unique identifier assigned to the certificate by the issuing CA."
                    },
                    "subject": {
                        "type": "string",
                        "description": "The entity (organization, domain, or individual) for which the certificate was issued."
                    },
                    "subject_key_identifier": {
                        "type": "string",
                        "description": "A unique identifier for the certificate's public key, used to facilitate key management."
                    },
                    "version": {
                        "type": "number",
                        "description": "The version of the X.509 certificate standard, typically 1, 2, or 3."
                    }
                }
            },
            "ConsoleMessage": {
                "type": "object",
                "description": "Represents a message logged in the browser's developer console during the scan.",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "The message content logged in the console."
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of console message, such as 'log', 'error', 'warn', or 'info'."
                    }
                }
            },
            "Cookie": {
                "type": "object",
                "description": "Represents an HTTP cookie set by the scanned webpage.",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The domain for which the cookie is valid."
                    },
                    "expiry": {
                        "type": "string",
                        "description": "The expiration date of the cookie in UTC format."
                    },
                    "http_only": {
                        "type": "boolean",
                        "description": "Indicates whether the cookie is accessible only through HTTP requests and not via JavaScript."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cookie."
                    },
                    "path": {
                        "type": "string",
                        "description": "The URL path within the domain where the cookie is valid."
                    },
                    "secure": {
                        "type": "boolean",
                        "description": "Indicates whether the cookie is sent only over HTTPS connections."
                    },
                    "value": {
                        "type": "string",
                        "description": "The stored value of the cookie."
                    }
                }
            },
            "Favicon": {
                "type": "object",
                "description": "Contains metadata about the webpage's favicon.",
                "properties": {
                    "blob_uri": {
                        "type": "string",
                        "description": "A temporary URI reference to the favicon (TTL 30 minutes)."
                    },
                    "format": {
                        "type": "string",
                        "description": "The detected format of the favicon, such as 'ico' or 'png'."
                    },
                    "height": {
                        "type": "number",
                        "description": "The height of the favicon in pixels."
                    },
                    "mimetype": {
                        "type": "string",
                        "description": "The MIME type of the favicon, such as 'image/png'."
                    },
                    "name": {
                        "type": "string",
                        "description": "The filename of the favicon, if available."
                    },
                    "phash": {
                        "type": "string",
                        "description": "A perceptual hash (pHash) value used for identifying visually similar favicons."
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the favicon file."
                    },
                    "width": {
                        "type": "number",
                        "description": "The width of the favicon in pixels."
                    }
                }
            },
            "HttpTransaction": {
                "type": "object",
                "description": "Represents an HTTP request-response transaction captured during the scan.",
                "properties": {
                    "content_type": {
                        "type": "string",
                        "description": "The content type of the HTTP response, such as 'text/html' or 'application/json'."
                    },
                    "ip": {
                        "type": "string",
                        "description": "The IP address of the server responding to the request."
                    },
                    "method": {
                        "type": "string",
                        "description": "The HTTP method used for the request, such as 'GET', 'POST', or 'HEAD'."
                    },
                    "mimetypes": {
                        "type": "string",
                        "description": "A list of MIME types associated with the response."
                    },
                    "size": {
                        "type": "number",
                        "description": "The size of the HTTP response body in bytes."
                    },
                    "status_code": {
                        "type": "number",
                        "description": "The HTTP status code returned by the server, such as 200 (OK) or 404 (Not Found)."
                    },
                    "url": {
                        "type": "string",
                        "description": "The requested URL associated with this transaction."
                    }
                }
            },
            "IpAddress": {
                "type": "object",
                "description": "Contains geolocation and network information for an IP address.",
                "properties": {
                    "asn": {
                        "type": "string",
                        "description": "Autonomous System Number (ASN) associated with the IP."
                    },
                    "city": {
                        "type": "string",
                        "description": "City where the IP address is located."
                    },
                    "country": {
                        "type": "string",
                        "description": "Country where the IP address is registered."
                    },
                    "country_code": {
                        "type": "string",
                        "description": "Two-letter country code (ISO 3166-1 alpha-2)."
                    },
                    "ip": {
                        "type": "string",
                        "description": "The IP address being analyzed."
                    },
                    "isp": {
                        "type": "string",
                        "description": "Internet Service Provider (ISP) associated with the IP."
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Approximate latitude coordinate of the IP location."
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Approximate longitude coordinate of the IP location."
                    },
                    "org": {
                        "type": "string",
                        "description": "Organization that owns or manages the IP address."
                    },
                    "region": {
                        "type": "string",
                        "description": "Region or state where the IP address is located."
                    },
                    "timezone_gmt": {
                        "type": "string",
                        "description": "Time zone in GMT offset format."
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of IP (e.g., residential, corporate, or cloud provider)."
                    }
                }
            },
            "Malicious": {
                "type": "object",
                "description": "Indicates whether the scanned URL or IP is classified as malicious.",
                "properties": {
                    "malicious": {
                        "type": "boolean",
                        "description": "True if the scan result suggests malicious activity."
                    },
                    "threat": {
                        "type": "string",
                        "enum": [
                            "PHISHING",
                            "SOCIAL_ENGINEERING",
                            "SCAM"
                        ],
                        "description": "Type of threat detected, such as scam or social engineering."
                    }
                }
            },
            "Page": {
                "type": "object",
                "description": "Contains metadata and content extracted from the scanned webpage.",
                "properties": {
                    "headers": {
                        "type": "object",
                        "description": "HTTP response headers from the scanned page."
                    },
                    "meta_tags": {
                        "type": "object",
                        "description": "Meta tags extracted from the HTML head section."
                    },
                    "outgoing_links": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of URLs linked from the scanned page."
                    },
                    "ssdeep": {
                        "type": "string",
                        "description": "SSDEEP hash used for fuzzy matching and detecting page similarity."
                    },
                    "text": {
                        "type": "string",
                        "description": "Extracted textual content of the webpage."
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the scanned webpage."
                    }
                }
            },
            "ScanFeedback": {
                "type": "object",
                "description": "User feedback on scan results, indicating whether a page is safe or malicious.",
                "properties": {
                    "malicious_count": {
                        "type": "number",
                        "description": "Number of times users reported the page as malicious."
                    },
                    "safe_count": {
                        "type": "number",
                        "description": "Number of times users reported the page as safe."
                    }
                }
            },
            "ScanWhois": {
                "type": "object",
                "description": "WHOIS registration data for the scanned domain.",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Registrant's address from WHOIS data."
                    },
                    "country": {
                        "type": "string",
                        "description": "Country where the domain is registered."
                    },
                    "creation_date": {
                        "type": "string",
                        "description": "Date when the domain was first registered."
                    },
                    "domain_name": {
                        "type": "string",
                        "description": "The domain name being scanned."
                    },
                    "expiration_date": {
                        "type": "string",
                        "description": "Date when the domain registration expires."
                    },
                    "name": {
                        "type": "string",
                        "description": "Registrant's name from WHOIS data."
                    },
                    "org": {
                        "type": "string",
                        "description": "Organization that owns the domain."
                    },
                    "registrant_postal_code": {
                        "type": "string",
                        "description": "Postal code associated with the registrant."
                    },
                    "registrar": {
                        "type": "string",
                        "description": "Registrar through which the domain was registered."
                    },
                    "state": {
                        "type": "string",
                        "description": "State or region where the domain is registered."
                    },
                    "updated_date": {
                        "type": "string",
                        "description": "Date when the domain WHOIS record was last updated."
                    }
                }
            },
            "Screenshot": {
                "type": "object",
                "description": "Represents a screenshot taken of the scanned webpage.",
                "properties": {
                    "blob_uri": {
                        "type": "string",
                        "description": "Temporary URI for accessing the screenshot (TTL 30 minutes)."
                    },
                    "format": {
                        "type": "string",
                        "description": "The file format of the screenshot, such as 'png' or 'jpeg'."
                    },
                    "height": {
                        "type": "number",
                        "description": "Height of the screenshot in pixels."
                    },
                    "mimetype": {
                        "type": "string",
                        "description": "MIME type of the screenshot image."
                    },
                    "phash": {
                        "type": "string",
                        "description": "Perceptual hash (pHash) value used for detecting image similarity."
                    },
                    "width": {
                        "type": "number",
                        "description": "Width of the screenshot in pixels."
                    }
                }
            },
            "Technology": {
                "type": "object",
                "description": "Represents detected technologies used by the scanned webpage.",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "Category of the detected technology, such as 'CMS', 'Analytics', or 'JavaScript Framework'."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the technology, such as 'WordPress' or 'Google Analytics'."
                    },
                    "version": {
                        "type": "string",
                        "description": "Detected version of the technology, if available."
                    }
                }
            },
            "ScanResult": {
                "type": "object",
                "description": "Represents the results of a scan performed on a URL, domain, or IP, including security, network, and content analysis.",
                "properties": {
                    "certificate": {
                        "$ref": "#/components/schemas/Certificate",
                        "description": "SSL/TLS certificate details of the scanned domain."
                    },
                    "console_messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConsoleMessage"
                        },
                        "description": "JavaScript console messages captured during page load."
                    },
                    "cookies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Cookie"
                        },
                        "description": "List of cookies set by the scanned page."
                    },
                    "dom": {
                        "type": "string",
                        "description": "HTML content of the scanned webpage's Document Object Model (DOM)."
                    },
                    "favicon": {
                        "$ref": "#/components/schemas/Favicon",
                        "description": "Favicon metadata and hash for similarity detection."
                    },
                    "http_transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HttpTransaction"
                        },
                        "description": "List of HTTP requests and responses observed during the scan."
                    },
                    "ip_address": {
                        "$ref": "#/components/schemas/IpAddress",
                        "description": "IP address and geolocation details of the scanned domain."
                    },
                    "malicious": {
                        "$ref": "#/components/schemas/Malicious",
                        "description": "Indicates whether the scan detected malicious activity."
                    },
                    "page": {
                        "$ref": "#/components/schemas/Page",
                        "description": "Metadata and extracted content from the scanned webpage."
                    },
                    "scan": {
                        "$ref": "#/components/schemas/Scan",
                        "description": "Details about the scan, such as timestamps and scan parameters."
                    },
                    "scan_feedback": {
                        "$ref": "#/components/schemas/ScanFeedback",
                        "description": "User feedback on the scan results, indicating if the page is safe or malicious."
                    },
                    "scan_whois": {
                        "$ref": "#/components/schemas/ScanWhois",
                        "description": "WHOIS registration information for the scanned domain."
                    },
                    "screenshot": {
                        "$ref": "#/components/schemas/Screenshot",
                        "description": "Screenshot of the scanned webpage for visual analysis."
                    },
                    "technologies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Technology"
                        },
                        "description": "List of detected technologies used by the scanned webpage."
                    }
                }
            },
            "QueryFilter": {
                "type": "object",
                "description": "Defines a filtering condition for queries, specifying an attribute, an operator, and a value to match.",
                "properties": {
                    "attribute": {
                        "type": "string",
                        "description": "The attribute to filter by (e.g., domain, ip, country_code).",
                        "enum": [
                            "asn",
                            "city",
                            "cookie_name",
                            "cookie_value",
                            "country_code",
                            "device",
                            "domain",
                            "favicon",
                            "http_transaction",
                            "ip",
                            "isp",
                            "issuer",
                            "malicious",
                            "nsfw",
                            "org",
                            "origin",
                            "outgoing_link",
                            "protocol",
                            "screenshot",
                            "serial_number",
                            "subject",
                            "submitted_url",
                            "target_url",
                            "technology",
                            "title",
                            "submitter_tag",
                            "registrar"
                        ]
                    },
                    "operator": {
                        "type": "string",
                        "description": "The comparison operator used in the filter. '=' and '!=' perform exact matches, while 'LIKE' and '!LIKE' allow partial matches.",
                        "enum": [
                            "=",
                            "!=",
                            "LIKE",
                            "!LIKE"
                        ]
                    },
                    "value": {
                        "type": "string",
                        "description": "The value to compare against the selected attribute."
                    }
                },
                "required": [
                    "attribute",
                    "operator",
                    "value"
                ]
            },
            "Query": {
                "type": "object",
                "description": "Represents a saved query containing multiple filters to retrieve relevant scan data.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the query."
                    },
                    "name": {
                        "type": "string",
                        "description": "A user-defined name for the query."
                    },
                    "query_filters": {
                        "type": "array",
                        "description": "A list of filtering conditions that define the query criteria.",
                        "items": {
                            "$ref": "#/components/schemas/QueryFilter"
                        }
                    }
                },
                "required": [
                    "name",
                    "query_filters"
                ]
            },
            "Brand": {
                "type": "object",
                "description": "Represents a brand associated with the user, used for tracking scans related to specific brand domains.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the brand."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the brand."
                    },
                    "private_brand": {
                        "type": "boolean",
                        "description": "Indicates whether the brand is private and only visible to the user."
                    }
                }
            },
            "Chat": {
                "type": "object",
                "description": "Represents a user chat session, storing prompts, responses, and scan-related details.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the chat session."
                    },
                    "chat_date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp when the chat session was created."
                    },
                    "prompt": {
                        "type": "string",
                        "description": "The user-provided input message."
                    },
                    "response": {
                        "type": "string",
                        "description": "The AI-generated response to the user's prompt."
                    },
                    "response_type": {
                        "type": "string",
                        "description": "The format of the response. If set to 'JSON', 'json_output' must contain a valid JSON dictionary.",
                        "enum": [
                            "MARKDOWN",
                            "JSON"
                        ]
                    },
                    "scan_id": {
                        "type": "string",
                        "description": "The associated scan ID"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the chat request.",
                        "enum": [
                            "PENDING",
                            "RUNNING",
                            "DONE",
                            "ERROR"
                        ]
                    },
                    "json_output": {
                        "type": "object",
                        "description": "A valid JSON dictionary containing structured response data. This is required if 'response_type' is 'JSON'."
                    }
                }
            },
            "Exception": {
                "type": "string",
                "example": "Somethings went wrong."
            },
            "NonPremiumUserException": {
                "type": "string",
                "example": "This functionality is available only for PREMIUM users. Upgrade your plan to access it."
            },
            "ApiQuotaExceededException": {
                "type": "string",
                "example": "The request cannot be completed because you have exceeded your daily quota. Contact urldna@urldna.io to upgrade your subscription plan."
            },
            "ObjectNotFoundException": {
                "type": "string",
                "example": "Object not found."
            },
            "UnauthorizedException": {
                "type": "string",
                "example": "Unauthorized."
            },
            "InvalidApiKey": {
                "type": "string",
                "example": "Invalid API key."
            }
        }
    },
    "security": [
        {
            "ApiKeyAuth": []
        }
    ],
    "paths": {
        "/scan/{scan_id}": {
            "get": {
                "summary": "Retrieve Scan Result",
                "description": "Fetch the details of a specific scan. If the scan status is PENDING or RUNNING, all attributes (except the scan metadata) will be empty.",
                "parameters": [
                    {
                        "name": "scan_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Unique identifier of the scan."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Scan result retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScanResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectNotFoundException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - API quota exceeded.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiQuotaExceededException"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/scan": {
            "post": {
                "summary": "Submit a New Scan",
                "description": "Initiate a new scan request. The response will contain the Scan object. Processing time varies based on system load (typically between 30 seconds and 1 minute) before the full scan result becomes available.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "submitted_url": {
                                        "type": "string",
                                        "description": "The URL to be scanned."
                                    },
                                    "scanned_from": {
                                        "type": "string",
                                        "default": "DEFAULT",
                                        "enum": [
                                            "DEFAULT",
                                            "AU",
                                            "BE",
                                            "CA",
                                            "CH",
                                            "DE",
                                            "ES",
                                            "FR",
                                            "GB",
                                            "GR",
                                            "HU",
                                            "ID",
                                            "IT",
                                            "JP",
                                            "MX",
                                            "NL",
                                            "PT",
                                            "ZA",
                                            "TR",
                                            "US"
                                        ],
                                        "description": "The country from which the scan was initiated. Available only for PREMIUM users."
                                    },
                                    "device": {
                                        "type": "string",
                                        "enum": [
                                            "DESKTOP",
                                            "MOBILE"
                                        ],
                                        "default": "DESKTOP",
                                        "description": "The type of device to simulate during the scan."
                                    },
                                    "user_agent": {
                                        "type": "string",
                                        "description": "Custom user agent string for the scan request. See User Agents endpoints."
                                    },
                                    "width": {
                                        "type": "integer",
                                        "default": 1920,
                                        "description": "Viewport width in pixels. See Viewports endpoints."
                                    },
                                    "height": {
                                        "type": "integer",
                                        "default": 1080,
                                        "description": "Viewport height in pixels. See Viewports endpoints."
                                    },
                                    "waiting_time": {
                                        "type": "integer",
                                        "default": 5,
                                        "description": "Time in seconds to wait before capturing scan results."
                                    },
                                    "private_scan": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "If true, the scan will not be publicly accessible."
                                    },
                                    "submitter_tags": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "A list of any tags associated with the scan. Available only for PREMIUM users."
                                    }
                                },
                                "required": [
                                    "submitted_url"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Scan request successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Scan"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - API quota exceeded.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiQuotaExceededException"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/search": {
            "post": {
                "summary": "Search Scans",
                "description": "Search for existing scan results using a query string or CQL (see the Search documentation for more details).",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "query": {
                                        "type": "string",
                                        "description": "Search query or CQL string to filter scans."
                                    }
                                },
                                "required": [
                                    "query"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Search results retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "List of matching scans, sorted by submission date in descending order.",
                                    "items": {
                                        "$ref": "#/components/schemas/Scan"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - This functionality is available only for PREMIUM users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NonPremiumUserException"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - API quota exceeded.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiQuotaExceededException"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/fast-check": {
            "post": {
                "summary": "Perform a Fast URL Check",
                "description": "Quickly assess whether a given URL is SAFE or MALICIOUS.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "The URL to check."
                                    }
                                },
                                "required": [
                                    "url"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Fast check result retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "malicious_score": {
                                            "type": "number",
                                            "description": "Score indicating the likelihood of the URL being malicious."
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "SAFE",
                                                "MALICIOUS",
                                                "UNRATED"
                                            ],
                                            "description": "Classification of the URL based on the scan results."
                                        },
                                        "url": {
                                            "type": "string",
                                            "description": "The scanned URL."
                                        }
                                    }
                                }
                            }
                        }
                    },"400": {
                        "description": "Bad Request - The client sent an invalid request (e.g., malformed URL).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectNotFoundException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - API quota exceeded.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiQuotaExceededException"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/scan/{scan_id}/feedback": {
            "post": {
                "summary": "Submit Scan Verdict Feedback",
                "description": "Provide feedback on the scan verdict. The feedback can either classify the scan as MALICIOUS or SAFE.",
                "parameters": [
                    {
                        "name": "scan_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Unique identifier of the scan."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "attribute": {
                                        "type": "string",
                                        "enum": [
                                            "SAFE",
                                            "MALICIOUS"
                                        ],
                                        "description": "User's classification of the scan result."
                                    }
                                },
                                "required": [
                                    "attribute"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Feedback successfully recorded.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "malicious_count": {
                                            "type": "number",
                                            "description": "Total number of users who classified this scan as MALICIOUS."
                                        },
                                        "safe_count": {
                                            "type": "number",
                                            "description": "Total number of users who classified this scan as SAFE."
                                        },
                                        "user_feedback": {
                                            "type": "string",
                                            "description": "The user's specific feedback, or null if none was provided."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectNotFoundException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user-agents": {
            "get": {
                "summary": "Retrieve Available User Agents",
                "description": "Fetch a list of user agents that can be used for scanning.",
                "responses": {
                    "200": {
                        "description": "List of available user agents retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserAgent"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/viewports": {
            "get": {
                "summary": "Retrieve Available Viewports",
                "description": "Fetch a list of supported viewport dimensions for scans.",
                "responses": {
                    "200": {
                        "description": "List of available viewports retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Viewport"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/queries": {
            "get": {
                "summary": "Get list of Query user objects",
                "description": "Retrieve a list of query objects associated with the user.",
                "responses": {
                    "200": {
                        "description": "List of Query objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Query"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/query": {
            "post": {
                "summary": "Create new query object",
                "description": "Create a new query object. The request must include a name and a list of query filters.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "A user-defined name for the query."
                                    },
                                    "query_filters": {
                                        "type": "array",
                                        "description": "A list of filtering conditions that define the query criteria.",
                                        "items": {
                                            "$ref": "#/components/schemas/QueryFilter"
                                        }
                                    }
                                },
                                "required": [
                                    "name",
                                    "query_filters"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Query object created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Query"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - This functionality is available only for PREMIUM users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NonPremiumUserException"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/query/{query_id}": {
            "put": {
                "summary": "Update query object",
                "description": "Update an existing query object. The request must include a name and a list of query filters.",
                "parameters": [
                    {
                        "name": "query_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "A user-defined name for the query."
                                    },
                                    "query_filters": {
                                        "type": "array",
                                        "description": "A list of filtering conditions that define the query criteria.",
                                        "items": {
                                            "$ref": "#/components/schemas/QueryFilter"
                                        }
                                    }
                                },
                                "required": [
                                    "name",
                                    "query_filters"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Query object updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Query"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectNotFoundException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - This functionality is available only for PREMIUM users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NonPremiumUserException"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Get query object",
                "description": "Retrieve details of a specific query object by ID.",
                "parameters": [
                    {
                        "name": "query_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Query object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Query"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectNotFoundException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete query object",
                "description": "Delete a specific query object",
                "parameters": [
                    {
                        "name": "query_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Query deleted"
                    },
                    "400": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectNotFoundException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/query/{query_id}/scans": {
            "get": {
                "summary": "Get scans matching query filter",
                "description": "Retrieve all scans that match the specified query filter.",
                "parameters": [
                    {
                        "name": "query_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Scan objects.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "List of matching scans, sorted by submission date in descending order.",
                                    "items": {
                                        "$ref": "#/components/schemas/Scan"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectNotFoundException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - API quota exceeded.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiQuotaExceededException"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brands": {
            "get": {
                "summary": "Get list of all related brands to user",
                "description": "Retrieve all brands associated with the user. This endpoint is only available for PREMIUM users.",
                "parameters": [{
                    "name": "filter",
                    "in": "query",
                    "description": "Filter brands by visibility. Allowed values: ALL, FREE, PREMIUM, USER_BRANDS",
                    "required": false,
                    "schema": {
                    "type": "string",
                    "enum": ["ALL", "FREE", "PREMIUM", "USER_BRANDS"]
                    }
                },
                {
                    "name": "query",
                    "in": "query",
                    "description": "Search for brands with similar name",
                    "required": false,
                    "schema": {
                    "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "List of Brand objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Brand"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - This functionality is available only for PREMIUM users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NonPremiumUserException"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brand/{brand_id}": {
            "get": {
                "summary": "Get brand detail",
                "description": "Retrieve details of a specific chat object. This endpoint is only available for PREMIUM users.",
                "parameters": [
                    {
                        "name": "brand_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of scans",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Brand"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectNotFoundException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - This functionality is available only for PREMIUM users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NonPremiumUserException"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brand/{brand_id}/scans": {
            "get": {
                "summary": "Get all scans matched with brand-",
                "description": "Retrieve all scans associated with a specific brand. This endpoint is only available for PREMIUM users.",
                "parameters": [
                    {
                        "name": "brand_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "CQL query string to filter brand scans. Refer to the /search endpoint for syntax details.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                }
                ],
                "responses": {
                    "200": {
                        "description": "List of Scan objects.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "List of matching scans, sorted by submission date in descending order.",
                                    "items": {
                                        "$ref": "#/components/schemas/Scan"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectNotFoundException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - This functionality is available only for PREMIUM users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NonPremiumUserException"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - API quota exceeded.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiQuotaExceededException"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chats": {
            "get": {
                "summary": "Get all user chats",
                "description": "Retrieve a list of all chat objects associated with the user. This endpoint is only available for PREMIUM users.",
                "operationId": "getChats",
                "responses": {
                    "200": {
                        "description": "List of Chat objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Chat"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - This functionality is available only for PREMIUM users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NonPremiumUserException"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chat": {
            "post": {
                "summary": "Create new chat object",
                "description": "Create a new chat object. This endpoint is only available for PREMIUM users.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "prompt": {
                                        "type": "string",
                                        "description": "The user-provided input message."
                                    },
                                    "response_type": {
                                        "type": "string",
                                        "description": "The format of the response. If set to 'JSON', 'json_output' must contain a valid JSON dictionary.",
                                        "enum": [
                                            "MARKDOWN",
                                            "JSON"
                                        ]
                                    },
                                    "scan_id": {
                                        "type": "string",
                                        "description": "The associated scan ID"
                                    },
                                    "json_output": {
                                        "type": "object",
                                        "description": "A valid JSON dictionary containing structured response data. This is required if 'response_type' is 'JSON'."
                                    }
                                },
                                "required": [
                                    "prompt",
                                    "response_type",
                                    "scan_id"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Chat object created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Chat"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - This functionality is available only for PREMIUM users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NonPremiumUserException"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - API quota exceeded.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiQuotaExceededException"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chat/{chat_id}": {
            "get": {
                "summary": "Get chat details",
                "description": "Retrieve details of a specific chat object. This endpoint is only available for PREMIUM users.",
                "operationId": "getChat",
                "parameters": [
                    {
                        "name": "chat_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chat object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Chat"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectNotFoundException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - This functionality is available only for PREMIUM users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NonPremiumUserException"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete chat",
                "description": "Delete a specific chat object. This endpoint is only available for PREMIUM users.",
                "parameters": [
                    {
                        "name": "chat_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chat deleted"
                    },
                    "400": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectNotFoundException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - API key is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidApiKey"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - This functionality is available only for PREMIUM users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NonPremiumUserException"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}